## General

### Goals

The VersaDok syntax is chosen so that the following goals are achieved:

1. Content should be parse-able line by line. This means that the identification of the type of a
   line may not depend on future lines.

2. Block elements should be uniquely defined by the first few characters of the line.

3. Superfluous leading whitespace should not matter. This means everything can be indented (or not)
   without a change in meaning.

4. Backtracking should not be needed. This avoids performance and security problems.


### Line breaks

The following are all recognized as a single line break: CR, LF and CR directly followed by LF.


### Whitespace and indentation

The following are the recognized whitespace characters: space, horizontal tab and vertical tab.

Some block elements use indentation for their content. The indentation level is defined by the
number of whitespace characters. This means a single tab only counts as a single character.


## Block markup

### Paragraph

Any line that does not start one of the other block elements starts a paragraph.

::example:
  A simple paragraph here.

  >Here a space is missing after '>', and it is
  therefore also a paragraph.

Whitespace is allowed before a paragraph:

::example:
  Paragraph starts at the left boundary.

     This one is indented.
        And some more leading whitespace.


### Header

A line starting with one to six '#' characters followed by at least a single space character defines
a header. The number of '#' characters defines the header level.

::example:
  # Header level 1

  ###### Header level 6

Whitespace is allowed before a header:

::example:
  # This header starts at the left boundary

     ## Header with whitespace before

Hard-wrapping header text works as expected. Continuation lines can use the same header marker as
the first line:

::example:
  ### Header 3
  continued here
  ### and here


### Blockquote

A line starting with a '>' character followed by a single space defines a blockquote. The content of
a blockquote is block markup.

::example:
  > This is a blockquote.
  > Another line.
  > 
  > # Header in blockquote

Whitespace is allowed before a blockquote:

::example:
  This is a paragraph.

    > This is a blockquote with whitespace before.

Hard-wrapping blockquote content works as expected:

::example:
  > This paragraph in the blockquote
  continues here.
  > And here.

As a special case a '>' directly followed by a line break is also considered to be the starting
character of a blockquote:

::example:
  > This is a blockquote.
  >
  > The line above contains only the '>' character.


### List

A line starting with a the list item marker followed by a single space defines a list item. The rest
of the line as well as all following lines indented more than the list item marker are considered
the content of the list item and block markup.

::example:
  * List item one

  * List item two

   Another paragraph in the list

The first list item of a list must be on a block boundary. The following ones don't need to be:

::example:
  * First list item on block boundary
  * Second list item.

    Second paragraph in second list item.
  * Third list item.

This also means that blank lines must preceed sub-lists:

::example:
  * First item

    * Sub-list first item
    * Sub-list second item
  * Second item

The following list item markers are supported:

* The characters '*', '+' and '-' create a bullet list.
* A decimal number followed by by either '.' or ')' creates an ordered list.

Different list item markers are not allowed within the same list:

::example:
  * List item
  + Not a list item but part of the preceeding paragraph

  + List item in new list

When creating an ordered list, the first list item marker defines the start number:

::example:
  5. First item but numbered as 5
  1. Second item but numbered as 6

Whitespace is allowed before a list item and counts against the needed indentation for its content:

::example:
  This is a paragraph.

     * List item with leading whitespace.

       Paragraph within the list item.

    Paragraph outside the list item.


### Extension block

A line starting with two ':' characters, followed by an extension name, another ':' character and
either a space or the end of the line defines an extension block. The allowed characters for the
name are 'a-z', 'A-Z', '0-9' and '_'. The rest of the line is parsed as an attribute list.

::example:
  ::extname: attribute=list #with .class

The extension block can optionally have indented content following it.

::example:
  ::extname:
    This is the content of the block.

    It needs to be indented.

Depending on the extension the content is either parsed as block level elements or directly
processed by the extension.

When processed by the extension the indentation needs to be two whitespace characters. This value
can be overridden by using the attribute 'indent'. The indentation is stripped from the lines before
they are passed to the extension.

::example:
  ::extname: indent=4
      All content needs to be indented 4 whitespace
      characters.
         The 3 leading spaces are preserved.

Whitespace is allowed before an extension block:

::example:
  Paragraph

     ::extname:
       This is the content.


### Attribute list

A line starting with a '{' character followed by a list of attributes, a '}' character, optional
whitespace and the end of the line defines an attribute list. If it is not directly followed by
another attribute list or a block element, it is discarded. Multiple attribute lists are combined.

::example:
  {#an-id .with-two .classes}
  paragraph

The attributes can be specified in the following ways (an attribute name can consist of any
character except whitespace, the '#' or '.' or '}' characters):

* A '#' character followed by an attribute name defines an identifier stored within the 'id'
  key. The last occurence wins. This is a shortcut for a key-value pair with an 'id' key.

  ::example:
    {#some-id-here}
    paragraph

* A '.' character followed by an attribute name defines a class name stored within the 'class'
  key. Multiple occurences will be combined using spaces.

  ::example:
     {.class1 .another-class}
     paragraph

* An attribute name followed by a '=' character and a value defines a key-value pair. The value can
  optionally be single or double quoted in which case it may contain whitespace. Any character
  except an unescaped '}' character can be included in the value. If multiple key-value pairs with
  the same key are specified, the last one wins.

  ::example:
    {key="quo\}ted" another='single quoted' and=bare}
    paragraph

* All other occurences of whitespace delimited character sequences are references.

  ::example:
    {everything here is just a reference}
    paragraph


## Inline Markup

### Precedence

Most inline elements are defined via opening and closing markers. Sometimes those markers may not be
properly nested. In such a case the first closing marker takes precedence and the markers of all
unclosed elements after the first matching opening marker are treated as literal text.

::example:
  _Here _is *emphasized_ text*.

Note that in the above example the second '_' is treated as literal text because at this point an
emphasis element is already open.

There is one exception to this rule: The start of an unclosed element with verbatim content is a
hard boundary for determining matching markers.

::example:
  This *is not `strong*.

In the above example the '\`' character would start a verbatim element. Therefore it acts as a hard
boundary across which the second '*' won't match. Besides the verbatim element this is also true for
the second part (the destination or reference) of a link.


### Literal text

While some characters are used to define inline elements, all other characters are parsed as literal
text.

::example:
  This is all just regular text,
  with no special meaning.

To prevent the effect of a special character, it can be backslash-escaped, resulting in the special
character to be treated literally.

::example:
  The following \* does nothing due to
  it being escaped.

  \# This is not a header.

The following special characters can be escaped: :escaped_chars:[].

Besides the special characters, the following escape sequences are supported:

* "\\ " (space) will be converted to a non-breaking space
* "\\\\" (backslash) will be converted to a single backslash


### Strong and emphasis

Part of the text can be marked up as strong (usually shown in a bold face) by using the '*'
character and as emphasis (usually shown in an italic face) by using the '_' character.

::example:
  The following *part is strong*.
  While _this is emphasized_.

Note that the opening marker must not be followed by whitespace while the closing marker must not be
preceeded by whitespace.

::example:
  This* is not a strong* element.
  And *neither is this *here.


### Superscript and subscript

Marking up text as superscript with the '^' character or as subscript with the '~' works exactly
like strong and emphasis.

::example:
  The following is ^higher^ than usual,
  while ~this is lower~.


### Verbatim

The verbatim element preserves content exactly as written. It starts with a '\`' character and ends
with one.

::example:
  The following `is *taken* exactly
  as it` is.

As the content is verbatim text backslash escapes don't work.


### Link

A link consists of two parts: The content of the link followed by either the destination or the
reference.

The link content starts with a '[' character, followed by the content itself and a ']'
character. The closing bracket must be directly followed without any intervening whitespace by the
'(' or '[' character, the destination or reference, and the closing ')' or ']' character.

::example:
  This is [an inline link](destination.html)
  and [this a reference one][ref].

The destination and reference are both treated as verbatim text. If there is a line break all
whitespace before the line break as well as the line break itself are removed.

::example:
  This is [a link with](a linebreak
  in the destination).

